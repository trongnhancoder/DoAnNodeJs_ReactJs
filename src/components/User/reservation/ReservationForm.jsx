import { useState, useEffect } from 'react';
import { FaCalendar, FaClock, FaUsers, FaUser, FaPhone, FaGlassCheers } from 'react-icons/fa';

const ReservationForm = ({ formData, onChange, onSubmit }) => {
  const [focused, setFocused] = useState('');

  // State ƒë·ªÉ l∆∞u c√°c time slots h·ª£p l·ªá
  const [availableTimeSlots, setAvailableTimeSlots] = useState([]);

  const partyTypes = [
    {
      id: 'normal',
      name: 'ƒê·∫∑t b√†n th∆∞·ªùng',
      icon: 'üçΩÔ∏è'
    },
    {
      id: 'birthday',
      name: 'Ti·ªác sinh nh·∫≠t',
      icon: 'üéÇ'
    },
    {
      id: 'anniversary',
      name: 'K·ª∑ ni·ªám',
      icon: 'üíë'
    },
    {
      id: 'family',
      name: 'Ti·ªác gia ƒë√¨nh',
      icon: 'üë®‚Äçüë©‚Äçüëß‚Äçüë¶'
    },
    {
      id: 'business',
      name: 'H·ªôi h·ªçp',
      icon: 'üíº'
    },
    {
      id: 'other',
      name: 'Kh√°c',
      icon: '‚ú®'
    }
  ];

  // H√†m t·∫°o time slots v√† ki·ªÉm tra ƒëi·ªÅu ki·ªán
  const generateTimeSlots = (selectedDate) => {
    const timeSlots = [
      { time: "11:00", period: "Tr∆∞a" },
      { time: "11:30", period: "Tr∆∞a" },
      { time: "12:00", period: "Tr∆∞a" },
      { time: "12:30", period: "Tr∆∞a" },
      { time: "13:00", period: "Tr∆∞a" },
      { time: "13:30", period: "Tr∆∞a" },
      { time: "17:30", period: "T·ªëi" },
      { time: "18:00", period: "T·ªëi" },
      { time: "18:30", period: "T·ªëi" },
      { time: "19:00", period: "T·ªëi" },
      { time: "19:30", period: "T·ªëi" },
      { time: "20:00", period: "T·ªëi" }
    ];

    const now = new Date();
    const selected = new Date(selectedDate);
    
    // N·∫øu l√† ng√†y h√¥m nay, l·ªçc c√°c time slots
    if (selected.toDateString() === now.toDateString()) {
      // Th√™m 30 ph√∫t v√†o th·ªùi gian hi·ªán t·∫°i
      const minTime = new Date(now.getTime() + 30 * 60000);
      
      return timeSlots.filter(slot => {
        const [hours, minutes] = slot.time.split(':');
        const slotTime = new Date(selected.setHours(Number(hours), Number(minutes)));
        return slotTime > minTime;
      });
    }
    
    // N·∫øu l√† ng√†y kh√°c, tr·∫£ v·ªÅ t·∫•t c·∫£ time slots
    return timeSlots;
  };

  // C·∫≠p nh·∫≠t time slots khi ng√†y thay ƒë·ªïi
  useEffect(() => {
    if (formData.date) {
      const slots = generateTimeSlots(formData.date);
      setAvailableTimeSlots(slots);
      
      // N·∫øu time ƒë√£ ch·ªçn kh√¥ng c√≤n trong danh s√°ch h·ª£p l·ªá, reset time
      if (formData.time && !slots.find(slot => slot.time === formData.time)) {
        onChange({ target: { name: 'time', value: '' } });
      }
    }
  }, [formData.date]);

  // X·ª≠ l√Ω khi thay ƒë·ªïi ng√†y
  const handleDateChange = (e) => {
    const newDate = e.target.value;
    onChange(e);
    
    // Reset time khi ƒë·ªïi ng√†y
    onChange({ target: { name: 'time', value: '' } });
  };

  return (
    <form onSubmit={onSubmit} className="space-y-6">
      {/* Th√¥ng tin c√° nh√¢n */}
      <div className="grid md:grid-cols-2 gap-6">
        {/* H·ªç t√™n */}
        <div className="form-group">
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <FaUser className="mr-2 text-yellow-500" />
            H·ªç v√† t√™n *
          </label>
          <input
            type="text"
            name="name"
            value={formData.name}
            onChange={onChange}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 
                     focus:border-transparent transition-all duration-300"
            placeholder="Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n"
            required
          />
        </div>

        {/* S·ªë ƒëi·ªán tho·∫°i */}
        <div className="form-group">
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <FaPhone className="mr-2 text-yellow-500" />
            S·ªë ƒëi·ªán tho·∫°i *
          </label>
          <input
            type="tel"
            name="phone"
            value={formData.phone}
            onChange={onChange}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 
                     focus:border-transparent transition-all duration-300"
            placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
            required
          />
        </div>
      </div>

      {/* Th√¥ng tin ƒë·∫∑t b√†n */}
      <div className="grid md:grid-cols-3 gap-6">
        {/* Ng√†y ƒë·∫∑t */}
        <div className="form-group">
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <FaCalendar className="mr-2 text-yellow-500" />
            Ng√†y ƒë·∫∑t b√†n *
          </label>
          <input
            type="date"
            name="date"
            value={formData.date}
            onChange={handleDateChange}
            min={new Date().toISOString().split('T')[0]}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 
                     focus:border-transparent transition-all duration-300"
            required
          />
        </div>

        {/* Th·ªùi gian */}
        <div className="form-group">
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <FaClock className="mr-2 text-yellow-500" />
            Th·ªùi gian *
          </label>
          <select
            name="time"
            value={formData.time}
            onChange={onChange}
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 
                     focus:border-transparent transition-all duration-300"
            required
            disabled={!formData.date}
          >
            <option value="">Ch·ªçn th·ªùi gian</option>
            {availableTimeSlots.length > 0 ? (
              <>
                <optgroup label="Bu·ªïi tr∆∞a">
                  {availableTimeSlots
                    .filter(slot => slot.period === "Tr∆∞a")
                    .map(slot => (
                      <option key={slot.time} value={slot.time}>
                        {slot.time}
                      </option>
                    ))}
                </optgroup>
                <optgroup label="Bu·ªïi t·ªëi">
                  {availableTimeSlots
                    .filter(slot => slot.period === "T·ªëi")
                    .map(slot => (
                      <option key={slot.time} value={slot.time}>
                        {slot.time}
                      </option>
                    ))}
                </optgroup>
              </>
            ) : formData.date ? (
              <option value="" disabled>
                Kh√¥ng c√≥ khung gi·ªù ph√π h·ª£p
              </option>
            ) : (
              <option value="" disabled>
                Vui l√≤ng ch·ªçn ng√†y tr∆∞·ªõc
              </option>
            )}
          </select>
          {formData.date && availableTimeSlots.length === 0 && (
            <p className="text-red-500 text-sm mt-1">
              ƒê√£ h·∫øt gi·ªù ƒë·∫∑t b√†n cho ng√†y h√¥m nay. Vui l√≤ng ch·ªçn ng√†y kh√°c.
            </p>
          )}
        </div>

        {/* S·ªë kh√°ch */}
        <div className="form-group">
          <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
            <FaUsers className="mr-2 text-yellow-500" />
            S·ªë kh√°ch *
          </label>
          <input
            type="number"
            name="guests"
            value={formData.guests}
            onChange={onChange}
            min="1"
            max="50"
            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 
                     focus:border-transparent transition-all duration-300"
            placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng kh√°ch"
            required
          />
        </div>
      </div>

      {/* Lo·∫°i ti·ªác */}
      <div className="form-group">
        <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
          <FaGlassCheers className="mr-2 text-yellow-500" />
          Lo·∫°i ti·ªác *
        </label>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-3">
          {partyTypes.map((type) => (
            <label
              key={type.id}
              className={`flex flex-col items-center p-3 border rounded-lg cursor-pointer
                transition-all duration-300 hover:shadow-md
                ${formData.partyType === type.id 
                  ? 'border-yellow-500 bg-yellow-50 text-yellow-600' 
                  : 'border-gray-200 hover:border-yellow-200'
                }`}
            >
              <input
                type="radio"
                name="partyType"
                value={type.id}
                checked={formData.partyType === type.id}
                onChange={onChange}
                className="hidden"
                required
              />
              <span className="text-2xl mb-1">{type.icon}</span>
              <span className="text-sm text-center">{type.name}</span>
            </label>
          ))}
        </div>
      </div>

      {/* Ghi ch√∫ */}
      <div className="form-group">
        <label className="flex items-center text-sm font-medium text-gray-700 mb-2">
          Ghi ch√∫ th√™m
        </label>
        <textarea
          name="request"
          value={formData.request}
          onChange={onChange}
          rows="3"
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 
                   focus:border-transparent transition-all duration-300"
          placeholder="Nh·∫≠p y√™u c·∫ßu ƒë·∫∑c bi·ªát c·ªßa b·∫°n (n·∫øu c√≥)"
        />
      </div>

      {/* N√∫t submit */}
      <button
        type="submit"
        className="w-full py-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 
                 transition-all duration-300 transform hover:scale-105 flex items-center justify-center"
      >
        <span className="mr-2">Ti·∫øp t·ª•c</span>
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </form>
  );
};

export default ReservationForm; 